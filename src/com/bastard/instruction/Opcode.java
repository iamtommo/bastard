package com.bastard.instruction;

import com.bastard.instruction.impl.BasicInstruction;


public enum Opcode {
	AASTORE(0x53, BasicInstruction.class),
	ACONST_NULL(0x01, BasicInstruction.class),
	ALOAD(0x19, BasicInstruction.class),
	ALOAD_0(0x2A, BasicInstruction.class),
	ALOAD_1(0x2B, BasicInstruction.class),
	ALOAD_2(0x2C, BasicInstruction.class),
	ALOAD_3(0x2D, BasicInstruction.class),
	ANEWARRAY(0xBD, Instruction.class),
	ARETURN(0xB0, Instruction.class),
	ARRAYLENGTH(0xBE, Instruction.class),
	ASTORE(0x3A, Instruction.class),
	ASTORE_0(0x4B, Instruction.class),
	ASTORE_1(0x4C, Instruction.class),
	ASTORE_2(0x4D, Instruction.class),
	ASTORE_3(0x4E, Instruction.class),
	ATHROW(0xBF, Instruction.class),
	BALOAD(0x33, Instruction.class),
	BASTORE(0x54, Instruction.class),
	BIPUSH(0x10, Instruction.class),
	BREAKPOINT(0xCA, Instruction.class),
	CALOAD(0x34, Instruction.class),
	CASTORE(0x55, Instruction.class),
	CHECKCAST(0xC0, Instruction.class),
	D2F(0x90, Instruction.class),
	D2I(0x8E, Instruction.class),
	D2L(0x8F, Instruction.class),
	DADD(0x63, Instruction.class),
	DALOAD(0x31, Instruction.class),
	DASTORE(0x52, Instruction.class),
	DCMPG(0x98, Instruction.class),
	DCMPL(0x97, Instruction.class),
	DCONST_0(0x0E, Instruction.class),
	DCONST_1(0x0F, Instruction.class),
	DDIV(0x6F, Instruction.class),
	DLOAD(0x18, Instruction.class),
	DLOAD_0(0x26, Instruction.class),
	DLOAD_1(0x27, Instruction.class),
	DLOAD_2(0x28, Instruction.class),
	DLOAD_3(0x29, Instruction.class),
	DMUL(0x6B, Instruction.class),
	DNEG(0x77, Instruction.class),
	DREM(0x73, Instruction.class),
	DRETURN(0xAF, Instruction.class),
	DSTORE(0x39, Instruction.class),
	DSTORE_0(0x47, Instruction.class),
	DSTORE_1(0x48, Instruction.class),
	DSTORE_2(0x49, Instruction.class),
	DSTORE_3(0x4A, Instruction.class),
	DSUB(0x67, Instruction.class),
	DUP(0x59, Instruction.class),
	DUP_X1(0x5A, Instruction.class),
	DUP_X2(0x5B, Instruction.class),
	DUP2(0x5C, Instruction.class),
	DUP2_X1(0x5D, Instruction.class),
	DUP2_X2(0x5E, Instruction.class),
	F2D(0x8D, Instruction.class),
	F2I(0x8B, Instruction.class),
	F2L(0x8C, Instruction.class),
	FADD(0x62, Instruction.class),
	FALOAD(0x30, Instruction.class),
	FASTORE(0x51, Instruction.class),
	FCMPG(0x96, Instruction.class),
	FCMPL(0x95, Instruction.class),
	FCONST_0(0x0B, Instruction.class),
	FCONST_1(0x0C, Instruction.class),
	FCONST_2(0x0D, Instruction.class),
	FDIV(0x6E, Instruction.class),
	FLOAD(0x17, Instruction.class),
	FLOAD_0(0x22, Instruction.class),
	FLOAD_1(0x23, Instruction.class),
	FLOAD_2(0x24, Instruction.class),
	FLOAD_3(0x25, Instruction.class),
	FMUL(0x6A, Instruction.class),
	FNEG(0x76, Instruction.class),
	FREM(0x72, Instruction.class),
	FRETURN(0xAE, Instruction.class),
	FSTORE(0x38, Instruction.class),
	FSTORE_0(0x43, Instruction.class),
	FSTORE_1(0x44, Instruction.class),
	FSTORE_2(0x45, Instruction.class),
	FSTORE_3(0x46, Instruction.class),
	FSUB(0x66, Instruction.class),
	GETFIELD(0xB4, Instruction.class),
	GETSTATIC(0xB2, Instruction.class),
	GOTO(0xA7, Instruction.class),
	GOTO_W(0xC8, Instruction.class),
	I2B(0x91, Instruction.class),
	I2C(0x92, Instruction.class),
	I2D(0x87, Instruction.class),
	I2F(0x86, Instruction.class),
	I2L(0x85, Instruction.class),
	I2S(0x93, Instruction.class),
	IADD(0x60, Instruction.class),
	IALOAD(0x2E, Instruction.class),
	IAND(0x7E, Instruction.class),
	IASTORE(0x4F, Instruction.class),
	ICONST_M1(0x02, Instruction.class),
	ICONST_0(0x03, Instruction.class),
	ICONST_1(0x04, Instruction.class),
	ICONST_2(0x05, Instruction.class),
	ICONST_3(0x06, Instruction.class),
	ICONST_4(0x07, Instruction.class),
	ICONST_5(0x08, Instruction.class),
	IDIV(0x6C, Instruction.class),
	IF_ACMPEQ(0xA5, Instruction.class),
	IF_ACMPNE(0xA6, Instruction.class),
	IF_ICMPEQ(0x9F, Instruction.class),
	IF_ICMPGE(0xA2, Instruction.class),
	IF_ICMPGT(0xA3, Instruction.class),
	IF_ICMPLE(0xA4, Instruction.class),
	IF_ICMPLT(0xA1, Instruction.class),
	IF_ICMPNE(0xA0, Instruction.class),
	IFEQ(0x99, Instruction.class),
	IFGE(0x9C, Instruction.class),
	IFGT(0x9D, Instruction.class),
	IFLE(0x9E, Instruction.class),
	IFLT(0x9B, Instruction.class),
	IFNE(0x9A, Instruction.class),
	IFNONNULL(0xC7, Instruction.class),
	IFNULL(0xC6, Instruction.class),
	IINC(0x84, Instruction.class),
	ILOAD(0x15, Instruction.class),
	ILOAD_0(0x1A, Instruction.class),
	ILOAD_1(0x1B, Instruction.class),
	ILOAD_2(0x1C, Instruction.class),
	ILOAD_3(0x1D, Instruction.class),
	IMPDEP1(0xFE, Instruction.class),
	IMPDEP2(0xFF, Instruction.class),
	IMUL(0x68, Instruction.class),
	INEG(0x74, Instruction.class),
	INSTANCEOF(0xC1, Instruction.class),
	INVOKEINTERFACE(0xB9, Instruction.class),
	INVOKESPECIAL(0xB7, Instruction.class),
	INVOKESTATIC(0xB8, Instruction.class),
	INVOKEVIRTUAL(0xB6, Instruction.class),
	IOR(0x80, Instruction.class),
	IREM(0x70, Instruction.class),
	IRETURN(0xAC, Instruction.class),
	ISHL(0x78, Instruction.class),
	ISHR(0x7A, Instruction.class),
	ISTORE(0x36, Instruction.class),
	ISTORE_0(0x3B, Instruction.class),
	ISTORE_1(0x3C, Instruction.class),
	ISTORE_2(0x3D, Instruction.class),
	ISTORE_3(0x3E, Instruction.class),
	ISUB(0x64, Instruction.class),
	IUSHR(0x7C, Instruction.class),
	IXOR(0x82, Instruction.class),
	JSR(0xA8, Instruction.class),
	JSR_W(0xC9, Instruction.class),
	L2D(0x8A, Instruction.class),
	L2F(0x89, Instruction.class),
	L2I(0x88, Instruction.class),
	LADD(0x61, Instruction.class),
	LALOAD(0x2F, Instruction.class),
	LAND(0x7F, Instruction.class),
	LASTORE(0x50, Instruction.class),
	LCMP(0x94, Instruction.class),
	LCONST_0(0x09, Instruction.class),
	LCONST_1(0x0A, Instruction.class),
	LDC(0x12, Instruction.class),
	LDC_W(0x13, Instruction.class),
	LDC2_W(0x14, Instruction.class),
	LDIV(0x6D, Instruction.class),
	LLOAD(0x16, Instruction.class),
	LLOAD_0(0x1E, Instruction.class),
	LLOAD_1(0x1F, Instruction.class),
	LLOAD_2(0x20, Instruction.class),
	LLOAD_3(0x21, Instruction.class),
	LMUL(0x69, Instruction.class),
	LNEG(0x75, Instruction.class),
	LOOKUPSWITCH(0xAB, Instruction.class),
	LOR(0x81, Instruction.class),
	LREM(0x71, Instruction.class),
	LRETURN(0xAD, Instruction.class),
	LSHL(0x79, Instruction.class),
	LSHR(0x7B, Instruction.class),
	LSTORE(0x37, Instruction.class),
	LSTORE_0(0x3F, Instruction.class),
	LSTORE_1(0x40, Instruction.class),
	LSTORE_2(0x41, Instruction.class),
	LSTORE_3(0x42, Instruction.class),
	LSUB(0x65, Instruction.class),
	LUSHR(0x7D, Instruction.class),
	LXOR(0x83, Instruction.class),
	MONITORENTER(0xC2, Instruction.class),
	MONITOREXIT(0xC3, Instruction.class),
	MULTIANEWARRAY(0xC5, Instruction.class),
	NEW(0xBB, Instruction.class),
	NEWARRAY(0xBC, Instruction.class),
	NOP(0x00, Instruction.class),
	POP(0x57, Instruction.class),
	POP2(0x58, Instruction.class),
	PUTFIELD(0xB5, Instruction.class),
	PUTSTATIC(0xB3, Instruction.class),
	RET(0xA9, Instruction.class),
	RETURN(0xB1, Instruction.class),
	SALOAD(0x35, Instruction.class),
	SASTORE(0x56, Instruction.class),
	SIPUSH(0x11, Instruction.class),
	SWAP(0x5F, Instruction.class),
	TABLESWITCH(0xAA, Instruction.class),
	WIDE(0xC4, Instruction.class);


	private int opcode;
	private Class<? extends Instruction> instructionClass;
	
	Opcode(int opcode, Class<? extends Instruction> instructionClass) {
		this.opcode = opcode;
		this.instructionClass = instructionClass;
	}
	
	public int getOpcode() {
		return opcode;
	}
	
	public Class<? extends Instruction> getInstructionClass() {
		return instructionClass;
	}
	
	@Override
	public String toString() {
		return this.name();
	}
	
	public static Opcode valueOf(int opcode) {
		for (Opcode o : Opcode.values()) {
			if (o.getOpcode() == opcode) {
				return o;
			}
		}
		return null;
	}
}
